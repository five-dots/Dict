% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dict.R
\name{Dict}
\alias{Dict}
\alias{dict}
\title{Dictionary Class}
\usage{
dict(..., .class = "any", .overwrite = TRUE)
}
\arguments{
\item{...}{Key and value pairs.}

\item{.class}{A character scalar. Value object's class.}

\item{.overwrite}{A logical scalar. Whether to overwrite the value if the
key is overlapped.}
}
\description{
Key-value dictionary class.
}
\examples{
ages <- Dict$new(Charlie = 40L, Alice = 30L, Bob = 25L,
                 .class = "integer", .overwrite = TRUE)

## Get by key
ages["Bob"] # or ages$get("Bob")

## Get by row index of self$items
ages[3] # or ages$get(3)

## Set a default value if the key does not exists (default = NULL)
ages["Michael", default = 30]

## Add new item
ages["John"] <- 18L # or ages$add(John = 18L)
ages["John"]

## Can be overridden if .overwrite = TRUE
ages["Bob"] <- 26L
ages$get("Bob")

## Check if items contains a key
ages$has("Bob")

## Remove item
ages$remove("Bob")
ages$has("Bob")

## Some additonal fields
ages$items # a tbl_df of items
ages$keys # a character vector of keys
ages$values # a list of values

## Sort by keys
ages$sort()
ages

## Clear
ages$clear()
ages

}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{items}}{Items of the dictionary.}

\item{\code{keys}}{Keys of the dictionary.}

\item{\code{values}}{Values of the dictionary.}

\item{\code{length}}{Length of items.}

\item{\code{class}}{Class of the dictionary values.}

\item{\code{overwrite}}{Wheather to overwrite value if key is overlapped.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Dict$new()}}
\item \href{#method-print}{\code{Dict$print()}}
\item \href{#method-add}{\code{Dict$add()}}
\item \href{#method-has}{\code{Dict$has()}}
\item \href{#method-get}{\code{Dict$get()}}
\item \href{#method-remove}{\code{Dict$remove()}}
\item \href{#method-sort}{\code{Dict$sort()}}
\item \href{#method-clear}{\code{Dict$clear()}}
\item \href{#method-clone}{\code{Dict$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Construct a new Dict object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$new(..., .class = "any", .overwrite = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Key and value pairs.}

\item{\code{.class}}{A character scalar of value object's class. If "any"
(default), value can contain any type of object.}

\item{\code{.overwrite}}{A logical scalar. Whether to overwrite the value if the
key is overlapped.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new Dict object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print Dict \code{items} which is normal \code{tbl_df} by tibble package.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Additional aruguments passed to \code{print.tbl}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Dict object by \code{invisible(self)}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
Adds key-value objects to the dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$add(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Key and value pairs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Dict object by \code{invisible(self)}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-has"></a>}}
\if{latex}{\out{\hypertarget{method-has}{}}}
\subsection{Method \code{has()}}{
Check if the object contains specified key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$has(key = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A character scalar.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A logical scalar.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Retrieves object with key `key` from the dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$get(key = NULL, default = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A character scalar, integer scalar of items index or NULL.
If key is NULL and items is not empty, the first value is returned.}

\item{\code{default}}{A default value returned, if the key is not found. Default
is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A object with corresponding key.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
Removes a key-value from the dictionary by a key. If key is not valid,
this function throw an error. Use \code{self$has()} to ensure key
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$remove(key = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A character scalar.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Dict object by \code{invisible(self)}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sort"></a>}}
\if{latex}{\out{\hypertarget{method-sort}{}}}
\subsection{Method \code{sort()}}{
Sort dictionary by keys.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$sort(desc = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{desc}}{A logical scalar.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Dict object by \code{invisible(self)}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
Clear dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$clear()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Dict object by \code{invisible(self)}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dict$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
